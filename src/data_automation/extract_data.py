import sys
import re
import pandas as pd

# -----------------------------------------------------------------------------
# CONFIG
# -----------------------------------------------------------------------------
OUTPUT_HEADER = "da7280_patterns.h"
# -----------------------------------------------------------------------------
# Header‐guard & includes
# -----------------------------------------------------------------------------
HEADER_GUARD = OUTPUT_HEADER.replace(".", "_").upper()
C_HEADER_PREAMBLE = f"""\
#ifndef {HEADER_GUARD}
#define {HEADER_GUARD}

/* This file is generated by gen_patterns.py; do not edit by hand. */

#include <stdint.h>
#include <stddef.h>

"""

C_HEADER_POSTAMBLE = f"""
#endif // {HEADER_GUARD}
"""

# -----------------------------------------------------------------------------
# Struct definitions (now without a name in the map entry)
# -----------------------------------------------------------------------------
C_STRUCT_DEFINITION = """
// One step of a vibration pattern
typedef struct {
    uint16_t duration_ms;
    uint8_t  force_pct;
} PatternStep;
"""

C_MAP_STRUCT = """
// Map entry tying mass to a pattern array
typedef struct {
    uint16_t          mass_g;
    const PatternStep *steps;
    size_t            count;
} PatternMapEntry;
"""

# -----------------------------------------------------------------------------
# Helpers
# -----------------------------------------------------------------------------
def parse_pattern(s):
    """
    Turn "200ms 20%, 300ms 50%, …" into [(200,20),(300,50),…]
    """
    items = re.findall(r'(\d+)\s*ms\s*(\d+)\s*%', s)
    return [(int(d), int(p)) for d, p in items]

# -----------------------------------------------------------------------------
# Main
# -----------------------------------------------------------------------------
def main(path):
    # Load all sheets
    all_sheets = pd.read_excel(path, sheet_name=None, dtype=str)

    patterns = {}
    idx = 0
    for sheet_name, df in all_sheets.items():
        if not {'Pattern vibratie','Efect','Masa (g)'}.issubset(df.columns):
            continue

        # Filter only “efect puternic”
        df = df[df['Efect'].str.strip().str.lower() == 'efect puternic']
        for _, row in df.iterrows():
            try:
                mass = int(float(row['Masa (g)']))
            except:
                mass = 0
            seq = parse_pattern(row['Pattern vibratie'])
            name = f"pattern_{idx}"
            patterns[name] = {
                'mass': mass,
                'seq': seq
            }
            idx += 1

    # Write out the header
    with open(OUTPUT_HEADER, "w") as fh:
        fh.write(C_HEADER_PREAMBLE)
        fh.write(f"#define PATTERN_MAP_SIZE {len(patterns)}\n")
        fh.write(C_STRUCT_DEFINITION)
        fh.write(C_MAP_STRUCT)
        fh.write("\n")
        # Each pattern array
        for name, info in patterns.items():
            fh.write(f"// {name}, mass = {info['mass']} g\n")
            fh.write(f"static const PatternStep {name}[] = {{\n")
            for dur, pct in info['seq']:
                fh.write(f"    {{ {dur}, {pct} }},\n")
            fh.write("};\n\n")

        # The map: now only mass, steps pointer, and count
        fh.write("const PatternMapEntry pattern_map[] = {\n")
        for name, info in patterns.items():
            cnt = len(info['seq'])
            fh.write(f"    {{ {info['mass']}, {name}, {cnt} }},\n")
        fh.write("};\n")
        fh.write(C_HEADER_POSTAMBLE)

    print(f"Generated {OUTPUT_HEADER} with {len(patterns)} patterns.")

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print("Usage: gen_patterns.py <input.xlsx>", file=sys.stderr)
        sys.exit(1)
    main(sys.argv[1])
