{"html":"<article class=\"\"><div class=\"content-top\"><\/div><div class=\"textblock\" data-banner-type=\"no-banner\"><h1>GAP<span id=\"gap\" class=\"self-anchor\"><a class=\"perm\" href=\"#gap\">#<\/a><\/span><\/h1><p style=\"color:inherit\">GAP. <\/p><p style=\"color:inherit\">The commands and events in this class are related to the Generic Access Profile (GAP) in Bluetooth. <\/p><div class=\"decl-class-section\"><h2>Enumerations<span id=\"enum-declaration\" class=\"self-anchor\"><a class=\"perm\" href=\"#enum-declaration\">#<\/a><\/span><\/h2><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-bt-gap-address-type-t\">sl_bt_gap_address_type_t<\/a> {<\/div><div class=\"enum\">sl_bt_gap_public_address = 0x0<\/div><div class=\"enum\">sl_bt_gap_static_address = 0x1<\/div><div class=\"enum\">sl_bt_gap_random_resolvable_address = 0x2<\/div><div class=\"enum\">sl_bt_gap_random_nonresolvable_address = 0x3<\/div><div class=\"enum\">sl_bt_gap_public_address_resolved_from_rpa = 0x4<\/div><div class=\"enum\">sl_bt_gap_static_address_resolved_from_rpa = 0x5<\/div><div class=\"enum\">sl_bt_gap_anonymous_address = 0xff<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">These values define Bluetooth device address types. Commands and events that have Bluetooth device address parameters will specify which values are valid for that particular command or event. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-bt-gap-phy-t\">sl_bt_gap_phy_t<\/a> {<\/div><div class=\"enum\">sl_bt_gap_phy_1m = 0x1<\/div><div class=\"enum\">sl_bt_gap_phy_2m = 0x2<\/div><div class=\"enum\">sl_bt_gap_phy_coded = 0x4<\/div><div class=\"enum\">sl_bt_gap_phy_any = 0xff<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Types of PHYs. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-bt-gap-phy-coding-t\">sl_bt_gap_phy_coding_t<\/a> {<\/div><div class=\"enum\">sl_bt_gap_phy_coding_1m_uncoded = 0x1<\/div><div class=\"enum\">sl_bt_gap_phy_coding_2m_uncoded = 0x2<\/div><div class=\"enum\">sl_bt_gap_phy_coding_125k_coded = 0x4<\/div><div class=\"enum\">sl_bt_gap_phy_coding_500k_coded = 0x8<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">PHY types with coding schemes. <\/p><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">enum<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-bt-gap-channel-selection-algorithm-t\">sl_bt_gap_channel_selection_algorithm_t<\/a> {<\/div><div class=\"enum\">sl_bt_gap_channel_selection_algorithm_1 = 0x0<\/div><div class=\"enum\">sl_bt_gap_channel_selection_algorithm_2 = 0x1<\/div><div class=\"attributename\">}<\/div><div class=\"classdescription\"><p style=\"color:inherit\">Types of channel selection algorithms in Link Layer. <\/p><\/div><\/div><\/div><\/div><\/div><div class=\"decl-class-section\"><h2>Functions<span id=\"func-declaration\" class=\"self-anchor\"><a class=\"perm\" href=\"#func-declaration\">#<\/a><\/span><\/h2><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-bt-gap-set-privacy-mode\">sl_bt_gap_set_privacy_mode<\/a>(uint8_t privacy, uint8_t interval)<\/div><div class=\"classdescription\"><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-bt-gap-set-data-channel-classification\">sl_bt_gap_set_data_channel_classification<\/a>(size_t channel_map_len, const uint8_t *channel_map)<\/div><div class=\"classdescription\"><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-bt-gap-set-identity-address\">sl_bt_gap_set_identity_address<\/a>(bd_addr address, uint8_t addr_type)<\/div><div class=\"classdescription\"><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">sl_status_t<\/div><div class=\"column\"><div class=\"attributename\"><a href=\"#sl-bt-gap-get-identity-address\">sl_bt_gap_get_identity_address<\/a>(bd_addr *address, uint8_t *type)<\/div><div class=\"classdescription\"><\/div><\/div><\/div><\/div><\/div><div class=\"decl-class-section\"><h2>Macros<span id=\"define-declaration\" class=\"self-anchor\"><a class=\"perm\" href=\"#define-declaration\">#<\/a><\/span><\/h2><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\">sl_bt_cmd_gap_set_privacy_mode_id 0x01020020<\/div><div class=\"classdescription\"><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\">sl_bt_cmd_gap_set_data_channel_classification_id 0x02020020<\/div><div class=\"classdescription\"><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\">sl_bt_cmd_gap_set_identity_address_id 0x04020020<\/div><div class=\"classdescription\"><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\">sl_bt_cmd_gap_get_identity_address_id 0x05020020<\/div><div class=\"classdescription\"><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\">sl_bt_rsp_gap_set_privacy_mode_id 0x01020020<\/div><div class=\"classdescription\"><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\">sl_bt_rsp_gap_set_data_channel_classification_id 0x02020020<\/div><div class=\"classdescription\"><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\">sl_bt_rsp_gap_set_identity_address_id 0x04020020<\/div><div class=\"classdescription\"><\/div><\/div><\/div><\/div><div><div class=\"columns\"><div class=\"attributename has-text-right\">#define<\/div><div class=\"column\"><div class=\"attributename\">sl_bt_rsp_gap_get_identity_address_id 0x05020020<\/div><div class=\"classdescription\"><\/div><\/div><\/div><\/div><\/div><div class=\"def-class-section\"><h2>Enumeration Documentation<span id=\"enum-definition\" class=\"self-anchor\"><a class=\"perm\" href=\"#enum-definition\">#<\/a><\/span><\/h2><div><h3>sl_bt_gap_address_type_t<span id=\"sl-bt-gap-address-type-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-bt-gap-address-type-t\">#<\/a><\/span><\/h3><blockquote>sl_bt_gap_address_type_t<\/blockquote><p style=\"color:inherit\">These values define Bluetooth device address types. Commands and events that have Bluetooth device address parameters will specify which values are valid for that particular command or event. <\/p><p style=\"color:inherit\">If the application does not include the bluetooth_feature_use_accurate_api_address_types component, most Bluetooth commands and events use a coarse address type that only differentiates between a public address and any random address. When the application includes the bluetooth_feature_use_accurate_api_address_types component, Bluetooth commands and events that include an address type will systematically use values of this <a href=\"http://docs.silabs.com/bluetooth/9.1.0/bluetooth-stack-api/sl-bt-gap#sl-bt-gap-address-type-t\" target=\"_blank\" rel=\"\">sl_bt_gap_address_type_t<\/a> enumeration to indicate the accurate address type.<\/p><p style=\"color:inherit\">The values <a href=\"http://docs.silabs.com/bluetooth/9.1.0/bluetooth-stack-api/sl-bt-gap#sl-bt-gap-public-address-resolved-from-rpa\" target=\"_blank\" rel=\"\">sl_bt_gap_public_address_resolved_from_rpa<\/a> and <a href=\"http://docs.silabs.com/bluetooth/9.1.0/bluetooth-stack-api/sl-bt-gap#sl-bt-gap-static-address-resolved-from-rpa\" target=\"_blank\" rel=\"\">sl_bt_gap_static_address_resolved_from_rpa<\/a> are reported by the Bluetooth stack only when the application includes the bluetooth_feature_resolving_list component and the address was resolved in the Bluetooth controller. If the application uses these two types in input parameters, they are treated as synonyms of <a href=\"http://docs.silabs.com/bluetooth/9.1.0/bluetooth-stack-api/sl-bt-gap#sl-bt-gap-public-address\" target=\"_blank\" rel=\"\">sl_bt_gap_public_address<\/a> and <a href=\"http://docs.silabs.com/bluetooth/9.1.0/bluetooth-stack-api/sl-bt-gap#sl-bt-gap-static-address\" target=\"_blank\" rel=\"\">sl_bt_gap_static_address<\/a>, respectively. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">sl_bt_gap_public_address<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">(0x0) Public device address <\/p><\/td><\/tr><tr><td class=\"fieldname\">sl_bt_gap_static_address<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">(0x1) Static device address <\/p><\/td><\/tr><tr><td class=\"fieldname\">sl_bt_gap_random_resolvable_address<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">(0x2) Resolvable private random address <\/p><\/td><\/tr><tr><td class=\"fieldname\">sl_bt_gap_random_nonresolvable_address<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">(0x3) Non-resolvable private random address <\/p><\/td><\/tr><tr><td class=\"fieldname\">sl_bt_gap_public_address_resolved_from_rpa<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">(0x4) Public identity address resolved from a resolvable private address (RPA) <\/p><\/td><\/tr><tr><td class=\"fieldname\">sl_bt_gap_static_address_resolved_from_rpa<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">(0x5) Static identity address resolved from a resolvable private address (RPA) <\/p><\/td><\/tr><tr><td class=\"fieldname\">sl_bt_gap_anonymous_address<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">(0xff) No address provided (anonymous advertising) <\/p><\/td><\/tr><\/tbody><\/table><br><\/div><div><h3>sl_bt_gap_phy_t<span id=\"sl-bt-gap-phy-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-bt-gap-phy-t\">#<\/a><\/span><\/h3><blockquote>sl_bt_gap_phy_t<\/blockquote><p style=\"color:inherit\">Types of PHYs. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">sl_bt_gap_phy_1m<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">(0x1) 1M PHY <\/p><\/td><\/tr><tr><td class=\"fieldname\">sl_bt_gap_phy_2m<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">(0x2) 2M PHY <\/p><\/td><\/tr><tr><td class=\"fieldname\">sl_bt_gap_phy_coded<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">(0x4) Coded PHY, 125k (S=8) or 500k (S=2) <\/p><\/td><\/tr><tr><td class=\"fieldname\">sl_bt_gap_phy_any<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">(0xff) Any PHYs the device supports <\/p><\/td><\/tr><\/tbody><\/table><br><\/div><div><h3>sl_bt_gap_phy_coding_t<span id=\"sl-bt-gap-phy-coding-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-bt-gap-phy-coding-t\">#<\/a><\/span><\/h3><blockquote>sl_bt_gap_phy_coding_t<\/blockquote><p style=\"color:inherit\">PHY types with coding schemes. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">sl_bt_gap_phy_coding_1m_uncoded<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">(0x1) 1M PHY <\/p><\/td><\/tr><tr><td class=\"fieldname\">sl_bt_gap_phy_coding_2m_uncoded<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">(0x2) 2M PHY <\/p><\/td><\/tr><tr><td class=\"fieldname\">sl_bt_gap_phy_coding_125k_coded<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">(0x4) 125k Coded PHY (S=8) <\/p><\/td><\/tr><tr><td class=\"fieldname\">sl_bt_gap_phy_coding_500k_coded<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">(0x8) 500k Coded PHY (S=2) <\/p><\/td><\/tr><\/tbody><\/table><br><\/div><div><h3>sl_bt_gap_channel_selection_algorithm_t<span id=\"sl-bt-gap-channel-selection-algorithm-t\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-bt-gap-channel-selection-algorithm-t\">#<\/a><\/span><\/h3><blockquote>sl_bt_gap_channel_selection_algorithm_t<\/blockquote><p style=\"color:inherit\">Types of channel selection algorithms in Link Layer. <\/p><table><tbody><tr><th colspan=\"2\">Enumerator<\/th><\/tr><tr><td class=\"fieldname\">sl_bt_gap_channel_selection_algorithm_1<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">(0x0) Channel selection algorithm #1 <\/p><\/td><\/tr><tr><td class=\"fieldname\">sl_bt_gap_channel_selection_algorithm_2<\/td><td class=\"fielddescription\"><p style=\"color:inherit\">(0x1) Channel selection algorithm #2 <\/p><\/td><\/tr><\/tbody><\/table><br><\/div><\/div><div class=\"def-class-section\"><h2>Function Documentation<span id=\"func-definition\" class=\"self-anchor\"><a class=\"perm\" href=\"#func-definition\">#<\/a><\/span><\/h2><div><h3>sl_bt_gap_set_privacy_mode<span id=\"sl-bt-gap-set-privacy-mode\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-bt-gap-set-privacy-mode\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_bt_gap_set_privacy_mode (uint8_t privacy, uint8_t interval)<\/blockquote><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>uint8_t<\/td><td>[in]<\/td><td class=\"paramname\">privacy<\/td><td><p style=\"color:inherit\">Values:<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\"><strong>0:<\/strong> Disable privacy<\/p><\/li><li><p style=\"color:inherit\"><strong>1:<\/strong> Enable privacy <\/p><\/li><\/ul><\/td><\/tr><tr><td>uint8_t<\/td><td>[in]<\/td><td class=\"paramname\">interval<\/td><td><p style=\"color:inherit\">The minimum time interval between a private address change. This parameter is ignored if this command is issued to disable privacy mode. Values:<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\"><strong>0:<\/strong> Use default interval, 15 minutes<\/p><\/li><li><p style=\"color:inherit\"><strong>others:<\/strong> The time interval in minutes<\/p><\/li><\/ul><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">Enable or disable the privacy feature on all GAP roles. New privacy mode will take effect for advertising next time advertising is enabled, for scanning next time scanning is enabled, and for initiating on the next open connection command.<\/p><p style=\"color:inherit\">When privacy is enabled and the device is advertising or scanning, the stack will maintain a periodic timer with the specified time interval as a timeout value. At each timeout, the stack generates a new resolvable private address and uses it in scanning requests. For advertisers, the stack generates a new resolvable or non-resolvable private address and uses it in advertising data packets for each advertising set if its address is not application-managed, i.e., the address was not set by the application (with the <a href=\"http://docs.silabs.com/bluetooth/9.1.0/bluetooth-stack-api/sl-bt-advertiser#sl-bt-advertiser-set-random-address\" target=\"_blank\" rel=\"\">sl_bt_advertiser_set_random_address<\/a> command). The application is fully responsible for application-managed advertiser addresses. For an application-managed resolvable private address, the application should schedule periodic address updates for enhancing the privacy. It is recommended to use different schedules for different advertising sets.<\/p><p style=\"color:inherit\">Disabling the privacy during active advertising or scanning is not allowed.<\/p><p style=\"color:inherit\">By default, privacy feature is disabled.<\/p><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise. <\/p><\/li><\/ul><br><\/div><div><h3>sl_bt_gap_set_data_channel_classification<span id=\"sl-bt-gap-set-data-channel-classification\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-bt-gap-set-data-channel-classification\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_bt_gap_set_data_channel_classification (size_t channel_map_len, const uint8_t * channel_map)<\/blockquote><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td>size_t<\/td><td>[in]<\/td><td class=\"paramname\">channel_map_len<\/td><td><p style=\"color:inherit\">Length of data in <code>channel_map<\/code><\/p><\/td><\/tr><tr><td>const uint8_t *<\/td><td>[in]<\/td><td class=\"paramname\">channel_map<\/td><td><p style=\"color:inherit\">5 byte bit field in little endian format. Only the first 37 bits are used. Bit 0 of the first byte is channel 0, bit 0 of the second byte is channel 8, etc. Bits 37-39 are reserved for future use and must be set to 0.<\/p><p style=\"color:inherit\">A channel is bad when its bit is 0. A channel is unknown when its bit is 1. At least two channels shall be marked as unknown. <\/p><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">Specify a channel classification for data channels. This classification persists until overwritten with a subsequent command or until the system is reset. The value length of <code>channel_map<\/code> must be 5 bytes.<\/p><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise. <\/p><\/li><\/ul><br><\/div><div><h3>sl_bt_gap_set_identity_address<span id=\"sl-bt-gap-set-identity-address\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-bt-gap-set-identity-address\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_bt_gap_set_identity_address (<a href=\"http://docs.silabs.com/bluetooth/9.1.0/bluetooth-stack-api/bd-addr\" target=\"_blank\" rel=\"\">bd_addr<\/a> address, uint8_t addr_type)<\/blockquote><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td><a href=\"http://docs.silabs.com/bluetooth/9.1.0/bluetooth-stack-api/bd-addr\" target=\"_blank\" rel=\"\">bd_addr<\/a><\/td><td>[in]<\/td><td class=\"paramname\">address<\/td><td><p style=\"color:inherit\">The address in little endian format <\/p><\/td><\/tr><tr><td>uint8_t<\/td><td>[in]<\/td><td class=\"paramname\">addr_type<\/td><td><p style=\"color:inherit\">Enum <a href=\"http://docs.silabs.com/bluetooth/9.1.0/bluetooth-stack-api/sl-bt-gap#sl-bt-gap-address-type-t\" target=\"_blank\" rel=\"\">sl_bt_gap_address_type_t<\/a>. The address type. Values:<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\"><strong>sl_bt_gap_public_address (0x0):<\/strong> Public device address<\/p><\/li><li><p style=\"color:inherit\"><strong>sl_bt_gap_static_address (0x1):<\/strong> Static device address<\/p><\/li><\/ul><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">Set the device's Bluetooth identity address to be used in advertising, scanning, connection initiation, and identity address exchange in bonding. The address is stored in RAM only and does not change the identity address in persistent storage. The address can be a public device address or static device address. It will be effective immediately in the next advertising, scanning, connection initiation, and bonding. Error SL_STATUS_INVALID_PARAMETER is returned if the address does not conform to the Bluetooth specification.<\/p><p style=\"color:inherit\">Note that advertising sets that have own addresses set by <a href=\"http://docs.silabs.com/bluetooth/9.1.0/bluetooth-stack-api/sl-bt-advertiser#sl-bt-advertiser-set-random-address\" target=\"_blank\" rel=\"\">sl_bt_advertiser_set_random_address<\/a> are not affected by this command, i.e., they will continue to use their own user defined addresses.<\/p><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise. <\/p><\/li><\/ul><br><\/div><div><h3>sl_bt_gap_get_identity_address<span id=\"sl-bt-gap-get-identity-address\" class=\"self-anchor\"><a class=\"perm\" href=\"#sl-bt-gap-get-identity-address\">#<\/a><\/span><\/h3><blockquote>sl_status_t sl_bt_gap_get_identity_address (<a href=\"http://docs.silabs.com/bluetooth/9.1.0/bluetooth-stack-api/bd-addr\" target=\"_blank\" rel=\"\">bd_addr<\/a> * address, uint8_t * type)<\/blockquote><div class=\"parameters-section\"><strong class=\"parameters\">Parameters<\/strong><table><thead><tr><th>Type<\/th><th>Direction<\/th><th>Argument Name<\/th><th>Description<\/th><\/tr><\/thead><tbody><tr><td><a href=\"http://docs.silabs.com/bluetooth/9.1.0/bluetooth-stack-api/bd-addr\" target=\"_blank\" rel=\"\">bd_addr<\/a> *<\/td><td>[out]<\/td><td class=\"paramname\">address<\/td><td><p style=\"color:inherit\">Bluetooth identity address in little endian format <\/p><\/td><\/tr><tr><td>uint8_t *<\/td><td>[out]<\/td><td class=\"paramname\">type<\/td><td><p style=\"color:inherit\">Enum <a href=\"http://docs.silabs.com/bluetooth/9.1.0/bluetooth-stack-api/sl-bt-gap#sl-bt-gap-address-type-t\" target=\"_blank\" rel=\"\">sl_bt_gap_address_type_t<\/a>. Identity address type. Values:<\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\"><strong>sl_bt_gap_public_address (0x0):<\/strong> Public device address<\/p><\/li><li><p style=\"color:inherit\"><strong>sl_bt_gap_static_address (0x1):<\/strong> Static device address<\/p><\/li><\/ul><\/td><\/tr><\/tbody><\/table><\/div><p style=\"color:inherit\">Get the Bluetooth identity address used by the device, which can be a public or random static device address.<\/p><p style=\"color:inherit\"><strong>Returns<\/strong><\/p><ul style=\"list-style:\"><li><p style=\"color:inherit\">SL_STATUS_OK if successful. Error code otherwise. <\/p><\/li><\/ul><br><\/div><\/div><div class=\"def-class-section\"><h2><\/h2><div><\/div><div><\/div><div><\/div><div><\/div><div><\/div><div><\/div><div><\/div><div><\/div><\/div><\/div><\/article><footer class=\"footer-commons-msg\"><\/footer><div class=\"light_theme hidden-lg\" ub-in-page=\"634f96f53042a864e44b82f8\"><\/div><div class=\"dark_theme hidden-lg\" ub-in-page=\"6735652b86eaf07b7012c67e\"><\/div>","url":"http://docs.silabs.com/bluetooth/9.1.0/bluetooth-stack-api/sl-bt-gap","status":"success"}
